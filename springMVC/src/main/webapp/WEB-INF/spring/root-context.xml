<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- recherche du fichier de properties -->
	<context:property-placeholder location="classpath*:sgbd.properties" />

	<!-- bean dataSource = bean de source des données, ou se retrouvent les données à manipuler dans mon application -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<!-- propriété driver -->
		<property name="driverClassName" value="${db.driver}" />
		<!-- propriété url -->
		<property name="url" value="${db.url}" />
		<!-- propriété username -->
		<property name="username" value="${db.user}" />
		<!-- propriété mot de passe -->
		<property name="password" value="${db.password}" />
	</bean>

	<!-- BEWARE if you use Hibernate 3, use instead class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean -->
	<!-- bean de creation de la session factory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
	<!-- la propriété dataSource de la sessionFactory  c'est le bean dataSource défini plus haut -->
		<property name="dataSource" ref="dataSource" />
		<!-- la propriété du package à scanner ici business.model qui va chercher les classes à transformer en bean-->
		<property name="packagesToScan" value="com.montparnasse.spring.domaine" />
		<!-- propriétés hibernate -->
		<property name="hibernateProperties">
			<props>
			<!-- dialect -->
				<prop key="hibernate.dialect">${db.hibernate.dialect}</prop>
				<!-- autogénération bdd -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.cglib.use_reflection_optimizer">false</prop>
				<prop key="hibernate.query.substitutions">true 1, false 0, yes 'Y', no 'N'</prop>
				<prop key="hibernate.connection.isolation">2</prop>
				<prop key="hibernate.max_fetch_depth">1</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>

<!-- définition du gestionnaire de transactions faisant référence au bean sessionFactory -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>

	</bean>
	<!-- pour utiliser les annotations spring -->
	<context:annotation-config />
	<!-- package contenant les classes annotées spring -->
	<context:component-scan base-package="com.montparnasse.spring" />
	<!-- prise en compte du gestionnaire de transaction pour @Transactional-->
	<tx:annotation-driven transaction-manager="transactionManager" />
		
</beans>
